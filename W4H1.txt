Summary for Android Testing (Android Dev Summit 2015)
This video introduces the Espresso testing framework.  The presenters also introduces the MVP pattern.  They also introduce the concept of Hermetic testing and flaky tests, which are tests that fails sometimes, not all of the time.  To prevent flaky tests, you will need to isolate your app from external dependencies, such as the network, storage, sensors, and the phone.  They replace these dependencies with different flavors of testing, prod and mock.  The mock flavor uses fake data, which isolates external dependencies.  When creating a mock test, the mock testing class is created for you, thus hiding them from the project folder to prevent accidental testing.
Mock mode is used for the unit testing.  Prod mode is for end-to-end testing prior to uploading to Google Play or wherever the app is being deployed to.  Unit testing is fundamental to testing.  Unit testing is done on your local machine and is done to test the individual logic of your program.  The problem is that most of the code is done on the MainActivity page.  Always test your business logic.  The mockable android jar is downloaded with the SDK, but the classes and methods are empty.  You can Mockito to unit-test your app with the mockable android jar.  The speakers also show how to do unit testing in Android Studio.  The testing framework used in the tutorial is TDD, which establishes a contract.  This makes adding features far easier; Android Studio will help you fill in the pieces in your app.
UI testing with Espresso
We use the IDE to generate code for our app.  We can use unit testing to tell the objects how to behave.   UI testing tests the UI for the app, which testing can be done using the emulator or on the cloud, or with your own device.  UI testing is hard to do before Espresso, which prevents flaky tests.  UI testing is made easier with Android Studio and Espresso.
There is an tutorial available on the Google page for further understanding of types of testing.

Richard Broyles